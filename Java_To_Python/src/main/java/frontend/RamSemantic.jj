options {
    JAVA_UNICODE_ESCAPE = true;
    DEBUG_PARSER = false;
    STATIC = false;
}

PARSER_BEGIN(RamParser)
    package frontend.generated;
    import java.io.FileNotFoundException;
    import visitor.*;
    import syntaxtree.*;

    public class RamParser {
        public static void main(String[] args) 
        throws ParseException, TokenMgrError, FileNotFoundException
        {
            if (args.length == 0) {
                RamParser parser = new RamParser( System.in ) ;
                parser.Goal();
            } else {
                java.io.InputStream is = new java.io.FileInputStream(new java.io.File(args[0]));
                RamParser parser = new RamParser( is ) ;
                // parser.Goal();
                Program root = parser.Goal();

                root.accept(new ASTPrintVisitor());
                root.accept(new JavaPrintVisitor());
                root.accept(new PythonPrintVisitor());
            }       
        }
    }
PARSER_END(RamParser)


// Insert a specification of a lexical analysis here. 

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">     // regex: http://regexpal.com/   /\*([^*])*\*(\*|([^*/]([^*])*\*))*/         */
}

TOKEN : 
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "." >
| < ASSIGN: "=" >
| < EQUALITY: "eq" >
| < NOTEQUALS: "ne" >
| < LESSTHAN: "<" >
| < GREATERTHAN: ">" >
| < LESSTHANOREQUALS: "le" >
| < GREATERTHANOREQUALS: "ge" >
| < PLUSEQUALS: "+=" >
| < MINUSEQUALS: "-=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < TIMES: "*" >
| < AND : "and" >   
| < OR : "or" >
| < EXCLAMATION : "!" >   
| < BOOLEAN: "bool" >   
| < CLASS: "class" >
| < ELSE: "else" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < FOR: "for" >
| < INTEGER: "integer" >   
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "print" >
| < PRINTLN: "println" >
| < VOID: "void" >  
| < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >  
| < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")* > 
| < #LETTER: ["a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >  
}


/*
void Goal() :
{}
{  
    ( RamToken() )*  <EOF> 
}

void RamToken():
{}
{
  <CLASS>  |  <IDENTIFIER> | <LBRACE> | <PUBLIC> | <STATIC> | <VOID> |
  <MAIN> | <LPAREN> | <STRING> | <LSQPAREN> | <RSQPAREN> | <RPAREN> | <RBRACE> | <EXCLAMATION> | 
  <PLUSEQUALS> | <MINUSEQUALS> | <SEMICOLON> | <RETURN> | <COMMA> | <INTEGER> | <BOOLEAN> | <ASSIGN> |
  <IF> | <ELSE> | <WHILE> | <COLON> | <PRINT> | <PRINTLN> | <AND> |
  <OR> | <LESSTHAN> | <GREATERTHAN> | <LESSTHANOREQUALS> | <GREATERTHANOREQUALS> | 
  <EQUALITY> | <NOTEQUALS> | <PLUS> | <MINUS> | <TIMES> |
  <DOT> | <LENGTH> | <INTEGER_LITERAL> | <TRUE> | <FALSE> | <THIS> | <NEW> |
  <SEMICOLON> | <FOR>
}
*/

Program Goal() :
{
    MainClass m; 
    ClassDeclList cl = new ClassDeclList();
    ClassDecl c;
}
{
    m = MainClass() 
    ( c = ClassDecl() { cl.addElement(c); } )*
    <EOF>
    { return new Program(m, cl); }
}


MainClass MainClass() :
{
    Identifier i1, i2;
    Statement s;
}
{
    <CLASS> 
    <IDENTIFIER> { i1 = new Identifier(token.image); }
    <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LSQPAREN> <RSQPAREN> 
    <IDENTIFIER> { i2 = new Identifier(token.image); }
    <RPAREN> <LBRACE> 
    s = Statement() 
    <RBRACE> <RBRACE>
    { return new MainClass(i1, i2, s); }
}

/*
MainClass MainClass() :
{
    Exp e;
    Statement s;
}
{
    <IF> 
    e = Exp() 
    s = Statement()
    { return new MainClass(e, s); }
}
*/

ClassDecl ClassDecl() : 
{
    Identifier i;
    VarDeclList vl = new VarDeclList();
    MethodDeclList ml = new MethodDeclList();
    VarDecl v;
    MethodDecl m;
}
{
    <CLASS> 
    <IDENTIFIER> { i = new Identifier(token.image); } 
    <LBRACE> 
    ( v = VarDecl() { vl.addElement(v); } )* 
    ( m = MethodDecl() { ml.addElement(m); } )* 
    <RBRACE> 
    { return new ClassDeclSimple(i, vl, ml); }
}

VarDecl VarDecl() :
{
    Type t;
    Identifier i;
}
{
    t = Type() 
    <IDENTIFIER> { i = new Identifier(token.image); }
    <SEMICOLON>
    { return new VarDecl(t, i); }
}

MethodDecl MethodDecl() :
{
    Type t;
    Identifier i;
    FormalList fl = new FormalList(); 
    VarDeclList vl = new VarDeclList();
    VarDecl v;
    StatementList sl = new StatementList();
    Statement s;
    Exp e;
}
{
    <PUBLIC> 
    t = Type()
    <IDENTIFIER> { i = new Identifier(token.image); }
    <LPAREN> 
    fl = FormalList()
    <RPAREN> <LBRACE> 
    ( LOOKAHEAD(2) v = VarDecl() { vl.addElement(v); } )* 
    ( s = Statement() { sl.addElement(s); } )* 
    <RETURN> 
    e = Exp() 
    <SEMICOLON> <RBRACE>    
    { return new MethodDecl(t, i, fl, vl, sl, e); }
}

Formal Formal() :
{ 
    Type t; 
    Identifier i;
}
{
    t = Type() 
    <IDENTIFIER> { i = new Identifier(token.image); }
    { return new Formal(t, i); }
}

FormalList FormalList() : 
{ 
    FormalList fl = new FormalList(); 
    Type t; 
    Identifier i;
    Formal f;
}
{
    [ 
        t = Type()
        <IDENTIFIER> { i = new Identifier(token.image); }
        { fl.addElement(new Formal(t, i)); }
        ( f = FormalRest() { fl.addElement(f); } )* 
    ]
    { return fl; }
}

Formal FormalRest() :
{ 
    Type t; 
    Identifier i;
}
{
    <COMMA> 
    t = Type() 
    <IDENTIFIER> { i = new Identifier(token.image); }
    { return new Formal(t, i); }
}

Type Type() :
{ 
}
{
    LOOKAHEAD(3)
    <INTEGER> <LSQPAREN> <RSQPAREN> { return new IntArrayType(); }
    |
    <BOOLEAN> { return new BooleanType(); }
    |
    <INTEGER> { return new IntegerType(); }
    |
    <IDENTIFIER>  { return new IdentifierType(token.image); }
}

Statement Statement() :
{
    StatementList sl = new StatementList();
    Statement s1;
    Exp e1;
    Statement s2;
    Exp e2;
    Exp e3;
    Identifier i;
    Identifier i2;
    Type t;
    ExpList el;
}
{
    <LBRACE> 
    ( s1 = Statement() { sl.addElement(s1); } )* 
    <RBRACE> 
    { return new Block(sl); }
    | 
    <IF> 
    e1 = Exp() 
    s1 = Statement()
    <ELSE> 
    s2 = Statement()
    { return new If(e1, s1, s2); }
    | 
    <WHILE> <LPAREN> 
    e1 = Exp()
    <RPAREN> 
    s1 = Statement()
    { return new While(e1, s1); } 
    | 
    // Contains 4 Parts = init; logic; update; statement;
    <FOR> <LPAREN> 
    <IDENTIFIER> { i = new Identifier(token.image); }    
    <ASSIGN>     
    e1 = Exp() 
    <SEMICOLON>
    e2 = Exp()
    <SEMICOLON>
    <IDENTIFIER> { i2 = new Identifier(token.image); }    
    <ASSIGN>     
    e3 = Exp() 
    <RPAREN> 
    s1 = Statement()
    { return new For(i, i2, e1, e2, e3, s1); } 
    |
    <PRINT> <LPAREN> 
    el = ExpList() 
    <RPAREN> <SEMICOLON> 
    { return new Print(el); } 
    |
    <PRINTLN> <LPAREN> 
    el = ExpList() 
    <RPAREN> <SEMICOLON> 
    { return new Println(el); } 
    | 
    LOOKAHEAD(2)
    <IDENTIFIER> { i = new Identifier(token.image); }
    <LSQPAREN> 
    e1 = Exp() 
    <RSQPAREN> 
    <ASSIGN> 
    e2 = Exp() 
    <SEMICOLON>
    { return new ArrayAssign(i, e1, e2); }
    |
    LOOKAHEAD(2)
    <IDENTIFIER> { i = new Identifier(token.image); }
    <PLUSEQUALS> 
    e1 = Exp() 
    <SEMICOLON>
    { return new PlusEquals(i, e1); }
    |
    LOOKAHEAD(2)
    <IDENTIFIER> { i = new Identifier(token.image); }
    <MINUSEQUALS> 
    e1 = Exp() 
    <SEMICOLON>
    { return new MinusEquals(i, e1); }
    |
    <IDENTIFIER> { i = new Identifier(token.image); }    
    <ASSIGN>     
    e1 = Exp() 
    <SEMICOLON>
    { return new Assign(i, e1); }
}

Exp Exp() : 
{
    Exp e;
} 
{        
    e = OrExp()
    { return e; }
}

Exp OrExp() : 
{
    Exp e1, e2;
} 
{        
    e1 = AndExp()
    (
        LOOKAHEAD(2)
        <OR> 
        e2 = AndExp()
        { e1 = new Or(e1, e2); }
    )*

    { return e1; }
}

Exp AndExp() : 
{
    Exp e1, e2;
} 
{        
    e1 = EqualityExp()
    (
        LOOKAHEAD(2)
        <AND> 
        e2 = EqualityExp()
        { e1 = new And(e1, e2); }
    )*

    { return e1; }
}

Exp EqualityExp() : 
{
    Exp e1, e2;
} 
{        
    e1 = RelationalExp()
    (
        LOOKAHEAD(2)
        <EQUALITY>
        e2 = RelationalExp()
        { e1 = new Equals(e1, e2); }
        |
        <NOTEQUALS>
        e2 = RelationalExp()
        { e1 = new NotEquals(e1, e2); }
    )*
    { return e1; }
}

Exp RelationalExp() : 
{
    Exp e1, e2;
} 
{
    e1 = AdditiveExp()
    (
        LOOKAHEAD(2)
        <LESSTHAN> 
        e2 = AdditiveExp()
        { e1 = new LessThan(e1, e2); }
        |
        <GREATERTHAN> 
        e2 = AdditiveExp()
        { e1 = new GreaterThan(e1, e2); }  
        |
        <LESSTHANOREQUALS> 
        e2 = AdditiveExp()
        { e1 = new LessThanOrEqualTo(e1, e2); }
        |
        <GREATERTHANOREQUALS> 
        e2 = AdditiveExp()
        { e1 = new GreaterThanOrEqualTo(e1, e2); }        
    )*    

    { return e1; }
}

Exp AdditiveExp() : 
{
    Exp e1, e2;
} 
{
    e1 = MultiplicativeExp()
    (
        LOOKAHEAD(2)
        <PLUS> e2 = MultiplicativeExp()
        { e1 = new Plus(e1, e2); }
        | 
        <MINUS> e2 = MultiplicativeExp()
        { e1 = new Minus(e1, e2); }
    )*

    { return e1; }
}

Exp MultiplicativeExp() : 
{
    Exp e1, e2;
} 
{
    e1 = UnaryExp()
    
    (
        LOOKAHEAD(2)
        <TIMES> 
        e2 = UnaryExp()
        { e1 = new Times(e1, e2); }
    )*

    { return e1; }
}

Exp UnaryExp() : 
{
    Exp e;
    boolean inNot = false;
} 
{
    ( <EXCLAMATION> { inNot = !inNot; } )*
    e = SuffixExp()
    { if (inNot) 
        return new Not(e);
      else
        return e; }
}

Exp SuffixExp() :
{
    Exp e1;
    Exp e2;
    ExpList el;
    Identifier i;
}
{
    e1 = PrefixExp() 
    (   
        <LSQPAREN> 
        e2 = Exp() 
	<RSQPAREN>
        { e1 = new ArrayLookup(e1, e2); }	
	| 
        LOOKAHEAD(2) 
        <DOT> <LENGTH> { e1 = new ArrayLength(e1); }
        | 
        <DOT> <IDENTIFIER> { i = new Identifier(token.image); }
	<LPAREN> 
        el = ExpList() 
	<RPAREN>
        { e1 = new Call(e1, i, el); } 
    )*
    { return e1; }
}

Exp PrefixExp() :
{
    Identifier i;
    Exp e;
}
{
    <INTEGER_LITERAL> { return new IntegerLiteral(Integer.parseInt(token.image)); }
    | 
    <TRUE> { return new True(); }
    |
    <FALSE> { return new False(); }
    | 
    <IDENTIFIER> { return new IdentifierExp(token.image); }
    |
    <THIS> { return new This(); }
    |
    LOOKAHEAD(2)
    <NEW> <INTEGER> <LSQPAREN> 
    e = Exp() 
    <RSQPAREN>
    { return new NewArray(e); }
    | 
    <NEW> 
    <IDENTIFIER> { i = new Identifier(token.image); }
    <LPAREN> <RPAREN> 
    { return new NewObject(i); }
    |
    <LPAREN>
    e = Exp()
    <RPAREN>
    { return e; }
    
}

ExpList ExpList() :
{ 
    ExpList el = new ExpList(); 
    Exp e;
}
{
    [ 
        e = Exp() { el.addElement(e); } 
        ( e = ExpRest() { el.addElement(e); } )* 
    ]
    { return el; }
}

Exp ExpRest() :
{
    Exp e;
}
{
    <COMMA> 
    e = Exp()
    { return e; }
}



    /*
    t = Type() <IDENTIFIER> <ASSIGN> 
    ( <INTEGER_LITERAL> | <IDENTIFIER> <DOT> <LENGTH> )
    <SEMICOLON>
    <IDENTIFIER>
    ( <LESSTHAN> | <GREATERTHAN> | <LESSTHANOREQUALS> | <GREATERTHANOREQUALS> )
    ( <IDENTIFIER> | <INTEGER_LITERAL> | <IDENTIFIER> <DOT> <LENGTH>)
    ( ( <AND> | <OR> ) <IDENTIFIER>
    ( <LESSTHAN> | <GREATERTHAN> | <LESSTHANOREQUALS> | <GREATERTHANOREQUALS> )
    ( <IDENTIFIER> | <INTEGER_LITERAL> | <IDENTIFIER> <DOT> <LENGTH>) )*
    <SEMICOLON>
        <IDENTIFIER> 
    ( <PLUS> | <MINUS | <TIMES> ) 
    ( <INTEGER_LITERAL> | <IDENTIFIER> <DOT> <LENGTH> )
    
    <RPAREN> 
    s1 = Statement()
    */